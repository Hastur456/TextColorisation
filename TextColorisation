{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"5Yf1YJAy15Nk"},"outputs":[],"source":["from google.colab import files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8o2W69_V2Xi_"},"outputs":[],"source":["!pip install -q kaggle"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":160},"executionInfo":{"elapsed":16664,"status":"ok","timestamp":1733485814856,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"HzNnS0ZD1XZK","outputId":"2bab6ea7-ea71-4041-9a64-d184b87b6b3f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a525e339-6de9-4abf-8603-1b11a9ed9203\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a525e339-6de9-4abf-8603-1b11a9ed9203\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n","Dataset URL: https://www.kaggle.com/datasets/simaanjali/emotion-analysis-based-on-text\n","License(s): CC0-1.0\n","Downloading emotion-analysis-based-on-text.zip to /content\n","100% 31.9M/31.9M [00:03<00:00, 15.5MB/s]\n","100% 31.9M/31.9M [00:03<00:00, 10.2MB/s]\n"]}],"source":["files.upload() # установка токена\n","\n","!mkdir ~/.kaggle\n","!cp kaggle.json ~/.kaggle\n","!chmod 600 ~/.kaggle/kaggle.json\n","\n","!kaggle datasets download -d \"simaanjali/emotion-analysis-based-on-text\"\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1618,"status":"ok","timestamp":1733485816464,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"b305Guoo8_-C","outputId":"340c715b-5119-413d-cffe-3e959e02bb91"},"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  emotion-analysis-based-on-text.zip\n","  inflating: emotion_sentimen_dataset.csv  \n"]}],"source":["!unzip emotion-analysis-based-on-text.zip\n","\n","!rm emotion-analysis-based-on-text.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":5394,"status":"ok","timestamp":1733485821854,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"jStEpWuPSEiM","colab":{"base_uri":"https://localhost:8080/"},"outputId":"87649602-7189-41d9-bb43-24cfe092c8c2"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/926.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m926.4/926.4 kB\u001b[0m \u001b[31m49.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}],"source":["!pip install -q torchmetrics\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":524,"status":"ok","timestamp":1733486561926,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"Z1G_gdSLjdHw","outputId":"e05b94b1-0264-45fd-d6b5-22823f6be748"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n","[nltk_data]   Package punkt_tab is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":31}],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import nltk\n","from nltk.tokenize import word_tokenize\n","from google.colab import drive\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report\n","import torch\n","from torch import nn\n","from torch.utils.data import TensorDataset, DataLoader\n","from torch.optim import Adam\n","import numpy as np\n","from tqdm.autonotebook import tqdm\n","\n","\n","nltk.download(\"punkt_tab\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lsJVQMGe0U8i"},"outputs":[],"source":["df = pd.read_csv(\"/content/emotion_sentimen_dataset.csv\", sep=\",\", header=None)\n","df.columns = [\"idx\", \"text\", \"emotions\"]\n","df.drop(df.index[0], inplace=True)\n","del df[\"idx\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1733485831344,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"d0ohqcHpAOv2","outputId":"e03fccab-0469-49fc-d374-5d748de47a75"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     text emotions\n","1       i seriously hate one subject to death but now ...     hate\n","2                      im so full of life i feel appalled  neutral\n","3       i sit here to write i start to dig out my feel...  neutral\n","4       ive been really angry with r and i feel like a...    anger\n","5       i feel suspicious if there is no one outside l...  neutral\n","...                                                   ...      ...\n","839551  i feel like telling these horny devils to find...  neutral\n","839552  i began to realize that when i was feeling agi...  neutral\n","839553  i feel very curious be why previous early dawn...  neutral\n","839554  i feel that becuase of the tyranical nature of...  neutral\n","839555  i think that after i had spent some time inves...  neutral\n","\n","[839555 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-f1ddcef0-42d3-48cb-b994-8c015c1b63dc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>emotions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>i seriously hate one subject to death but now ...</td>\n","      <td>hate</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>im so full of life i feel appalled</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i sit here to write i start to dig out my feel...</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ive been really angry with r and i feel like a...</td>\n","      <td>anger</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>i feel suspicious if there is no one outside l...</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>839551</th>\n","      <td>i feel like telling these horny devils to find...</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>839552</th>\n","      <td>i began to realize that when i was feeling agi...</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>839553</th>\n","      <td>i feel very curious be why previous early dawn...</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>839554</th>\n","      <td>i feel that becuase of the tyranical nature of...</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>839555</th>\n","      <td>i think that after i had spent some time inves...</td>\n","      <td>neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>839555 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1ddcef0-42d3-48cb-b994-8c015c1b63dc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f1ddcef0-42d3-48cb-b994-8c015c1b63dc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f1ddcef0-42d3-48cb-b994-8c015c1b63dc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-852a40b0-c869-4969-95ba-0b4b0704ad17\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-852a40b0-c869-4969-95ba-0b4b0704ad17')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-852a40b0-c869-4969-95ba-0b4b0704ad17 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":8}],"source":["df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aCqN5gd3AkaP"},"outputs":[],"source":["labels_count = df[\"emotions\"].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":523},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1733485831345,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"csWxx8wkBFvv","outputId":"e3138f9c-5535-411a-df4f-19aa8d7e93b4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["emotions\n","neutral       674538\n","love           39553\n","happiness      27175\n","sadness        17481\n","relief         16729\n","hate           15267\n","anger          12336\n","fun            10075\n","enthusiasm      9304\n","surprise        6954\n","empty           5542\n","worry           4475\n","boredom          126\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>emotions</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>neutral</th>\n","      <td>674538</td>\n","    </tr>\n","    <tr>\n","      <th>love</th>\n","      <td>39553</td>\n","    </tr>\n","    <tr>\n","      <th>happiness</th>\n","      <td>27175</td>\n","    </tr>\n","    <tr>\n","      <th>sadness</th>\n","      <td>17481</td>\n","    </tr>\n","    <tr>\n","      <th>relief</th>\n","      <td>16729</td>\n","    </tr>\n","    <tr>\n","      <th>hate</th>\n","      <td>15267</td>\n","    </tr>\n","    <tr>\n","      <th>anger</th>\n","      <td>12336</td>\n","    </tr>\n","    <tr>\n","      <th>fun</th>\n","      <td>10075</td>\n","    </tr>\n","    <tr>\n","      <th>enthusiasm</th>\n","      <td>9304</td>\n","    </tr>\n","    <tr>\n","      <th>surprise</th>\n","      <td>6954</td>\n","    </tr>\n","    <tr>\n","      <th>empty</th>\n","      <td>5542</td>\n","    </tr>\n","    <tr>\n","      <th>worry</th>\n","      <td>4475</td>\n","    </tr>\n","    <tr>\n","      <th>boredom</th>\n","      <td>126</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}],"source":["labels_count"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1733485831346,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"Fwjen5GtVkAs","outputId":"dc139222-8d00-4703-f6a7-79d7c4f9f341"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#data visualisation\n","plt.bar(list(labels_count.keys()), list(labels_count.values))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jSWzczQ9KsB6"},"outputs":[],"source":["emotions_dict = {}\n","for idx, em in enumerate(list(labels_count.keys())):\n","    emotions_dict[em] = idx"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":761,"status":"ok","timestamp":1733485832092,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"qSWdQmnJWkq6","outputId":"979654c1-53a7-49ca-def9-c45da15e8a9b"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-13-eb686730f0fb>:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df[\"emotions_nums\"] = df[\"emotions\"].replace(emotions_dict)\n"]}],"source":["df[\"emotions_nums\"] = df[\"emotions\"].replace(emotions_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1733485832093,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"iD6e_p-wJWgx","outputId":"aca179d9-6b30-49d6-81f5-02a39a6f6013"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['i seriously hate one subject to death but now i feel reluctant to drop it',\n","       'im so full of life i feel appalled',\n","       'i sit here to write i start to dig out my feelings and i think that i am afraid to accept the possibility that he might not make it',\n","       ...,\n","       'i feel very curious be why previous early dawn in the time here don t you seek his trouble',\n","       'i feel that becuase of the tyranical nature of the government in el salvador and the savage social conditions of the general people that the set of thought to run the shoe shop in miguel marmols testimoney was able to work',\n","       'i think that after i had spent some time investigating the surroundings and things i started to feel more curious about other people'],\n","      dtype=object)"]},"metadata":{},"execution_count":14}],"source":["df[\"text\"].values"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zShUjNVCQ7CN"},"outputs":[],"source":["X = df[\"text\"].values\n","y = df[\"emotions_nums\"].values\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.01, train_size=0.05)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SC3glxZ6QD6d"},"outputs":[],"source":["vectorizer = TfidfVectorizer(max_features=15000)\n","vectorizer.fit(X)\n","\n","X_train = vectorizer.transform(X_train).toarray()\n","X_test = vectorizer.transform(X_test).toarray()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1733485849023,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"zJYI4Ra71ja4","outputId":"cfab5e82-e6d4-452b-9c38-517779d044a6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        aa  aaron   ab  aback  abandon  abandoned  abandoning  abandonment  \\\n","0      0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","1      0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","2      0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","3      0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","4      0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","...    ...    ...  ...    ...      ...        ...         ...          ...   \n","41972  0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","41973  0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","41974  0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","41975  0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","41976  0.0    0.0  0.0    0.0      0.0        0.0         0.0          0.0   \n","\n","       abbey  abby  ...  zip  zoe  zombie  zombies  zone  zoned  zones  zoo  \\\n","0        0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","1        0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","2        0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","3        0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","4        0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","...      ...   ...  ...  ...  ...     ...      ...   ...    ...    ...  ...   \n","41972    0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","41973    0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","41974    0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","41975    0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","41976    0.0   0.0  ...  0.0  0.0     0.0      0.0   0.0    0.0    0.0  0.0   \n","\n","       zoom  zumba  \n","0       0.0    0.0  \n","1       0.0    0.0  \n","2       0.0    0.0  \n","3       0.0    0.0  \n","4       0.0    0.0  \n","...     ...    ...  \n","41972   0.0    0.0  \n","41973   0.0    0.0  \n","41974   0.0    0.0  \n","41975   0.0    0.0  \n","41976   0.0    0.0  \n","\n","[41977 rows x 15000 columns]"],"text/html":["\n","  <div id=\"df-c91541db-0339-4c39-905f-2ba0df6b0ecf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>aa</th>\n","      <th>aaron</th>\n","      <th>ab</th>\n","      <th>aback</th>\n","      <th>abandon</th>\n","      <th>abandoned</th>\n","      <th>abandoning</th>\n","      <th>abandonment</th>\n","      <th>abbey</th>\n","      <th>abby</th>\n","      <th>...</th>\n","      <th>zip</th>\n","      <th>zoe</th>\n","      <th>zombie</th>\n","      <th>zombies</th>\n","      <th>zone</th>\n","      <th>zoned</th>\n","      <th>zones</th>\n","      <th>zoo</th>\n","      <th>zoom</th>\n","      <th>zumba</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>41972</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>41973</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>41974</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>41975</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>41976</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>41977 rows × 15000 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c91541db-0339-4c39-905f-2ba0df6b0ecf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c91541db-0339-4c39-905f-2ba0df6b0ecf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c91541db-0339-4c39-905f-2ba0df6b0ecf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4f2a2b72-274a-4b70-8cdb-efda2aba4cac\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f2a2b72-274a-4b70-8cdb-efda2aba4cac')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4f2a2b72-274a-4b70-8cdb-efda2aba4cac button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":17}],"source":["pd.DataFrame(X_train, columns = vectorizer.get_feature_names_out())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D1MyhfzTRHIU"},"outputs":[],"source":["DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\""]},{"cell_type":"code","source":["X_train = torch.FloatTensor(X_train)\n","y_train = torch.LongTensor(y_train)\n","X_test = torch.FloatTensor(X_test)\n","y_test = torch.LongTensor(y_test)"],"metadata":{"id":"ir-6orXBDqkT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dataset = TensorDataset(X_train, y_train)\n","test_dataset = TensorDataset(X_test, y_test)\n","\n","train_dataloader = DataLoader(train_dataset, batch_size=64)\n","test_dataloader = DataLoader(test_dataset, batch_size=64)"],"metadata":{"id":"sFzl7F_uD4Fb"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BBgf8AHjyng2"},"outputs":[],"source":["class ColorisationTextClassifier(nn.Module):\n","  def __init__(self,\n","               vec_len: int,\n","               num_classes: int,\n","               hidden_size_LSTM = 128\n","               ):\n","    super().__init__()\n","    self.LSTM_1 = nn.LSTM(input_size=vec_len, hidden_size=hidden_size_LSTM, batch_first=True, bidirectional=True, dropout=0.2)\n","    self.outputs = nn.Linear(hidden_size_LSTM, num_classes)\n","\n","  def forward(self, x):\n","    x = x.unsqueeze(1)\n","    outputs, (hn, cn) = self.LSTM_1(x)\n","    x = self.outputs(hn[-1])\n","    return x"]},{"cell_type":"code","source":["torch.cuda.empty_cache()\n","!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5jzubBrWLwIe","executionInfo":{"status":"ok","timestamp":1733487554370,"user_tz":-300,"elapsed":667,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"}},"outputId":"9b6d1728-3904-4793-ec9f-86dcaa7a93a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fri Dec  6 12:19:14 2024       \n","+---------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n","|-----------------------------------------+----------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                      |               MIG M. |\n","|=========================================+======================+======================|\n","|   0  Tesla T4                       Off | 00000000:00:04.0 Off |                    0 |\n","| N/A   59C    P0              29W /  70W |    587MiB / 15360MiB |      0%      Default |\n","|                                         |                      |                  N/A |\n","+-----------------------------------------+----------------------+----------------------+\n","                                                                                         \n","+---------------------------------------------------------------------------------------+\n","| Processes:                                                                            |\n","|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n","|        ID   ID                                                             Usage      |\n","|=======================================================================================|\n","+---------------------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["84c6415086db4e10a831756c6d0054fb","4b8c391d42fa442fab56b3dec2032a05","8b8bdcde6d744b2eb0f070324dc000b5","3fb43d810c994b6a804bd217d3fc1abd","e0f8b72d18364f08ad02bf94ca74c5e6","0f2a6586b6e545a6b7dbe52b4b2a525e","55a17cb1596b49ba89cb82529252f6f2","7b96db3d8e5f41f3ba6e8f2304cedcea","315065e45c3341309b77f6e555b805df","1ed3bc7b42494c84805a1b38629cb510","7ff42f335310477a80bb8a6523e2b3cb"]},"collapsed":true,"executionInfo":{"elapsed":589280,"status":"ok","timestamp":1733488169621,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"},"user_tz":-300},"id":"k44Qt4D5kLwN","outputId":"f282271a-03ea-4521-b330-0b1ad653ed47"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:123: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.2 and num_layers=1\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"84c6415086db4e10a831756c6d0054fb"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch: 0, Loss: 0.4514292776584625\n","Epoch: 1, Loss: 0.02959579974412918\n","Epoch: 2, Loss: 0.004931098315864801\n","Epoch: 3, Loss: 0.001633568317629397\n","Epoch: 4, Loss: 0.0007910099811851978\n","Epoch: 5, Loss: 0.000490246748086065\n","Epoch: 6, Loss: 0.00032300205202773213\n","Epoch: 7, Loss: 0.00023225435870699584\n","Epoch: 8, Loss: 0.00017908940208144486\n","Epoch: 9, Loss: 0.0002954774536192417\n","Epoch: 10, Loss: 0.005127909127622843\n","Epoch: 11, Loss: 0.003749340306967497\n","Epoch: 12, Loss: 0.000542380555998534\n","Epoch: 13, Loss: 0.0003159356419928372\n","Epoch: 14, Loss: 0.00019205146236345172\n","Epoch: 15, Loss: 0.00014125030429568142\n","Epoch: 16, Loss: 9.7658034064807e-05\n","Epoch: 17, Loss: 5.231515388004482e-05\n","Epoch: 18, Loss: 1.6686601156834513e-05\n","Epoch: 19, Loss: 8.611268640379421e-06\n","Epoch: 20, Loss: 5.2278555813245475e-06\n","Epoch: 21, Loss: 3.487168442006805e-06\n","Epoch: 22, Loss: 2.431517941658967e-06\n","Epoch: 23, Loss: 1.7415336515114177e-06\n","Epoch: 24, Loss: 1.2597536169778323e-06\n","Epoch: 25, Loss: 9.120368531512213e-07\n","Epoch: 26, Loss: 6.602329563065723e-07\n","Epoch: 27, Loss: 4.778307811648119e-07\n","Epoch: 28, Loss: 3.458336266248807e-07\n","Epoch: 29, Loss: 2.5028526806636364e-07\n","Epoch: 30, Loss: 1.8148840297271818e-07\n","Epoch: 31, Loss: 1.3158194178686244e-07\n","Epoch: 32, Loss: 9.589720662006584e-08\n","Epoch: 33, Loss: 6.993842305291764e-08\n","Epoch: 34, Loss: 5.121565394006211e-08\n","Epoch: 35, Loss: 3.7654988460644745e-08\n","Epoch: 36, Loss: 2.7818250813993473e-08\n","Epoch: 37, Loss: 2.057193349003228e-08\n","Epoch: 38, Loss: 1.543839189821483e-08\n","Epoch: 39, Loss: 1.1602415028733049e-08\n","Epoch: 40, Loss: 8.865260525681151e-09\n","Epoch: 41, Loss: 6.7527632374719815e-09\n","Epoch: 42, Loss: 5.301491246001433e-09\n","Epoch: 43, Loss: 4.228202676870296e-09\n","Epoch: 44, Loss: 3.3536715626780733e-09\n","Epoch: 45, Loss: 2.819517730401344e-09\n","Epoch: 46, Loss: 2.4134849674339875e-09\n","Epoch: 47, Loss: 2.0841155468076522e-09\n","Epoch: 48, Loss: 1.8427672721088584e-09\n","Epoch: 49, Loss: 1.6354915199912057e-09\n","Epoch: 50, Loss: 1.5900614158681492e-09\n","Epoch: 51, Loss: 1.5900614158681492e-09\n","Epoch: 52, Loss: 1.6014189974100645e-09\n","Epoch: 53, Loss: 1.584382736119494e-09\n","Epoch: 54, Loss: 1.6553677317787674e-09\n","Epoch: 55, Loss: 1.732031407186696e-09\n","Epoch: 56, Loss: 1.7661042628347445e-09\n","Epoch: 57, Loss: 1.845607555672757e-09\n","Epoch: 58, Loss: 1.933628812622601e-09\n","Epoch: 59, Loss: 2.0273287493211e-09\n","Epoch: 60, Loss: 2.0727592975333664e-09\n","Epoch: 61, Loss: 2.2317654391201813e-09\n","Epoch: 62, Loss: 2.3339838950420244e-09\n","Epoch: 63, Loss: 2.4191657566063896e-09\n","Epoch: 64, Loss: 2.5554569571539787e-09\n","Epoch: 65, Loss: 2.60088728332164e-09\n","Epoch: 66, Loss: 2.7655719936348078e-09\n","Epoch: 67, Loss: 2.8876661062327003e-09\n","Epoch: 68, Loss: 3.026796369098861e-09\n","Epoch: 69, Loss: 3.080745214489866e-09\n","Epoch: 70, Loss: 3.214196908629674e-09\n","Epoch: 71, Loss: 3.3107363517359545e-09\n","Epoch: 72, Loss: 3.3391305276353478e-09\n","Epoch: 73, Loss: 3.4527063430545013e-09\n","Epoch: 74, Loss: 3.4527063430545013e-09\n","Epoch: 75, Loss: 3.5889970995128806e-09\n","Epoch: 76, Loss: 3.6063829700339056e-09\n","Epoch: 77, Loss: 3.7199585634084542e-09\n","Epoch: 78, Loss: 3.7824254839335936e-09\n","Epoch: 79, Loss: 3.853410035503657e-09\n","Epoch: 80, Loss: 3.943922077809248e-09\n","Epoch: 81, Loss: 4.0010590396377665e-09\n","Epoch: 82, Loss: 4.103277273515005e-09\n","Epoch: 83, Loss: 4.168234202239773e-09\n","Epoch: 84, Loss: 4.248086327152123e-09\n","Epoch: 85, Loss: 4.293516653319784e-09\n","Epoch: 86, Loss: 4.358822636163495e-09\n","Epoch: 87, Loss: 4.4212895566886345e-09\n","Epoch: 88, Loss: 4.444004719772465e-09\n","Epoch: 89, Loss: 4.466720326945506e-09\n","Epoch: 90, Loss: 4.6143684429011955e-09\n","Epoch: 91, Loss: 4.665826391914152e-09\n","Epoch: 92, Loss: 4.705229095236518e-09\n","Epoch: 93, Loss: 4.767696015761658e-09\n","Epoch: 94, Loss: 4.79325068525327e-09\n","Epoch: 95, Loss: 4.847199086555065e-09\n","Epoch: 96, Loss: 4.852878099370628e-09\n","Epoch: 97, Loss: 4.841520517828712e-09\n","Epoch: 98, Loss: 5.028919947136501e-09\n","Epoch: 99, Loss: 4.903986994264642e-09\n"]}],"source":["vec_len = len(vectorizer.vocabulary_)\n","num_classes = len(emotions_dict)\n","\n","model = ColorisationTextClassifier(vec_len, num_classes)\n","model = model.to(DEVICE)\n","criterion = nn.CrossEntropyLoss()\n","optimizer = Adam(model.parameters(), lr=42e-4)\n","\n","EPOCHS = 100\n","total_loss = []\n","train_loss = []\n","\n","for epoch in tqdm(range(EPOCHS)):\n","  for X_batch, y_batch in train_dataloader:\n","    model.train()\n","    optimizer.zero_grad()\n","\n","    logits = model(X_batch.to(DEVICE))\n","    loss = criterion(logits, y_batch.to(DEVICE))\n","    train_loss.append(loss.detach().cpu().numpy())\n","    loss.backward()\n","\n","    optimizer.step()\n","  print(\"Epoch: {}, Loss: {}\".format(epoch, np.mean(train_loss)))\n","  total_loss.append(np.mean(train_loss))\n","  train_loss.clear()\n"]},{"cell_type":"code","source":["plt.figure(figsize=(15, 6))\n","plt.plot(total_loss)\n","plt.title(\"Text Colorisation Loss\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"loss\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"R4IG3HLl9oUp","executionInfo":{"status":"ok","timestamp":1733489288458,"user_tz":-300,"elapsed":488,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"}},"outputId":"9e36cd1f-5dbd-431e-8260-ae12400429de"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["predictions = []\n","targets = []\n","\n","model.eval()\n","with torch.no_grad():\n","  for x, target in tqdm(test_dataloader):\n","    outputs = torch.argmax(model(x.to(DEVICE)), 1)\n","    predictions.append(outputs.detach())\n","    targets.append(target.detach())\n","\n","predictions = torch.cat(predictions).cpu().numpy()\n","targets = torch.cat(targets).cpu().numpy()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["a6f832bc2abc4c57a1810fefed0af240","98c5f80bece1452981caff829f18fbfd","8d55e738d6824493a5031b882f6cde03","af78a5a0b14444eb910803c41c4de0ef","8ad1874f7e2b47ef8d7d26797e879938","8c64063ef3b34a00bc079dfb14a56a78","71608a228c784979b4833a9a7066c1d0","3dbbcf742cfe4be99c9016055bdf12ae","a2d7b97d899c4831b1d67180e42c653f","e133d346ca604b92aa9ffcf1c3b11513","42ccc51d4f1046d983e5904d14045724"]},"id":"ObhKUxA08V7a","executionInfo":{"status":"ok","timestamp":1733488725951,"user_tz":-300,"elapsed":533,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"}},"outputId":"f09f20fc-1654-49fb-9a92-a7db3bb884ab"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/132 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a6f832bc2abc4c57a1810fefed0af240"}},"metadata":{}}]},{"cell_type":"code","source":["print(f\"Accuracy: {accuracy_score(targets, predictions)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1pnYQF6M-uFS","executionInfo":{"status":"ok","timestamp":1733488786318,"user_tz":-300,"elapsed":465,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"}},"outputId":"79a40945-7e3c-42d4-e11b-7857b0cb1179"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9734397332062887\n"]}]},{"cell_type":"code","source":["print(classification_report(targets, predictions, target_names=list(emotions_dict.keys())))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UeS_pQjv-8kp","executionInfo":{"status":"ok","timestamp":1733489029169,"user_tz":-300,"elapsed":441,"user":{"displayName":"Till Lindemann","userId":"14630388097980959238"}},"outputId":"1b11491b-c8ff-47c2-c950-e320c389fd90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","     neutral       0.98      1.00      0.99      6748\n","        love       0.94      0.93      0.93       426\n","   happiness       0.96      0.90      0.93       296\n","     sadness       0.99      0.92      0.96       151\n","      relief       0.94      0.81      0.87       147\n","        hate       0.99      0.90      0.95       144\n","       anger       0.95      0.86      0.90       115\n","         fun       0.98      0.81      0.89       115\n","  enthusiasm       1.00      0.91      0.95        89\n","    surprise       1.00      0.83      0.91        70\n","       empty       1.00      0.78      0.88        50\n","       worry       1.00      0.69      0.82        42\n","     boredom       0.00      0.00      0.00         3\n","\n","    accuracy                           0.97      8396\n","   macro avg       0.90      0.80      0.84      8396\n","weighted avg       0.97      0.97      0.97      8396\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]}]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1855w0-mrJjhejBM49IBrUrJfSF4Q2gw6","authorship_tag":"ABX9TyPCvDZ2xgvbdUWZVS6c4Is9"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"84c6415086db4e10a831756c6d0054fb":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4b8c391d42fa442fab56b3dec2032a05","IPY_MODEL_8b8bdcde6d744b2eb0f070324dc000b5","IPY_MODEL_3fb43d810c994b6a804bd217d3fc1abd"],"layout":"IPY_MODEL_e0f8b72d18364f08ad02bf94ca74c5e6"}},"4b8c391d42fa442fab56b3dec2032a05":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0f2a6586b6e545a6b7dbe52b4b2a525e","placeholder":"​","style":"IPY_MODEL_55a17cb1596b49ba89cb82529252f6f2","value":"100%"}},"8b8bdcde6d744b2eb0f070324dc000b5":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_7b96db3d8e5f41f3ba6e8f2304cedcea","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_315065e45c3341309b77f6e555b805df","value":100}},"3fb43d810c994b6a804bd217d3fc1abd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1ed3bc7b42494c84805a1b38629cb510","placeholder":"​","style":"IPY_MODEL_7ff42f335310477a80bb8a6523e2b3cb","value":" 100/100 [09:48&lt;00:00,  6.20s/it]"}},"e0f8b72d18364f08ad02bf94ca74c5e6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0f2a6586b6e545a6b7dbe52b4b2a525e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"55a17cb1596b49ba89cb82529252f6f2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7b96db3d8e5f41f3ba6e8f2304cedcea":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"315065e45c3341309b77f6e555b805df":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1ed3bc7b42494c84805a1b38629cb510":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7ff42f335310477a80bb8a6523e2b3cb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a6f832bc2abc4c57a1810fefed0af240":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_98c5f80bece1452981caff829f18fbfd","IPY_MODEL_8d55e738d6824493a5031b882f6cde03","IPY_MODEL_af78a5a0b14444eb910803c41c4de0ef"],"layout":"IPY_MODEL_8ad1874f7e2b47ef8d7d26797e879938"}},"98c5f80bece1452981caff829f18fbfd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8c64063ef3b34a00bc079dfb14a56a78","placeholder":"​","style":"IPY_MODEL_71608a228c784979b4833a9a7066c1d0","value":"100%"}},"8d55e738d6824493a5031b882f6cde03":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_3dbbcf742cfe4be99c9016055bdf12ae","max":132,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a2d7b97d899c4831b1d67180e42c653f","value":132}},"af78a5a0b14444eb910803c41c4de0ef":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e133d346ca604b92aa9ffcf1c3b11513","placeholder":"​","style":"IPY_MODEL_42ccc51d4f1046d983e5904d14045724","value":" 132/132 [00:00&lt;00:00, 357.50it/s]"}},"8ad1874f7e2b47ef8d7d26797e879938":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8c64063ef3b34a00bc079dfb14a56a78":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"71608a228c784979b4833a9a7066c1d0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3dbbcf742cfe4be99c9016055bdf12ae":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a2d7b97d899c4831b1d67180e42c653f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e133d346ca604b92aa9ffcf1c3b11513":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"42ccc51d4f1046d983e5904d14045724":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}